<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://ofbiz.apache.org/Simple-Method" xsi:schemaLocation="http://ofbiz.apache.org/Simple-Method http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="checkCategoryRelatedPermission" short-description="Check Product Category Related Permission">
        <if-empty field="callingMethodName">
            <property-to-field resource="CommonUiLabels" property="CommonPermissionThisOperation" field="callingMethodName"/>
        </if-empty>
        <if-empty field="checkAction">
            <set field="checkAction" value="UPDATE"/>
        </if-empty>
        <if-empty field="productCategoryIdName">
            <set field="productCategoryIdName" value="productCategoryId"/>
        </if-empty>
        <if-empty field="productCategoryIdToCheck">
            <set field="productCategoryIdToCheck" from-field="parameters.${productCategoryIdName}"/>
        </if-empty>

        <!-- find all role-categories that this category is a member of -->
        <if>
            <condition>
                <not><if-has-permission permission="CATALOG" action="_${checkAction}"/></not>
            </condition>
            <then>
                <entity-and entity-name="ProductCategoryRollupAndRole" list="roleCategories" filter-by-date="true">
                    <field-map field-name="productCategoryId" from-field="productCategoryIdToCheck"/>
                    <field-map field-name="partyId" from-field="userLogin.partyId"/>
                    <field-map field-name="roleTypeId" value="LTD_ADMIN"/>
                </entity-and>
                <filter-list-by-date list="roleCategories" from-field-name="roleFromDate" thru-field-name="roleThruDate"/>
            </then>
        </if>
        <log level="info" message="Checking category permission, roleCategories=${roleCategories}"/>
        <if>
            <condition>
                <not>
                    <or>
                        <if-has-permission permission="CATALOG" action="_${checkAction}"/>
                        <and>
                            <if-has-permission permission="CATALOG_ROLE" action="_${checkAction}"/>
                            <not><if-empty field="roleCategories"/></not>
                        </and>
                    </or>
                </not>
            </condition>
            <then>
                <log level="verbose" message="Permission check failed, user does not have permission"/>
                <add-error>
                    <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
                </add-error>
                <set field="hasPermission" type="Boolean" value="false"/>
            </then>
        </if>
    </simple-method>

    <!-- Load data of best selling category -->
    <simple-method method-name="loadBestSellingCategory" short-description="Load data of best selling category by week.">
        <now-date-to-env field="nowDate"/>
        <set field="week" value="${groovy: import java.util.Calendar;
            Calendar cal = Calendar.getInstance();
            cal.setTime(nowDate);
            return cal.get(Calendar.WEEK_OF_YEAR);}" type="Long"/>
        <set field="year" value="${groovy: import java.util.Calendar;
            Calendar cal = Calendar.getInstance();
            cal.setTime(nowDate);
            int aa = cal.get(Calendar.YEAR);
            return aa;}" type="Long"/>
        <if-compare field="week" operator="equals" value="1">
            <set field="week" value="52"/>
        <else>
            <calculate field="week">
                <calcop operator="subtract" field="week">
                    <number value="1"/>
                </calcop>
            </calculate>
            <if-compare field="week" operator="equals" value="1">
                <calculate field="year">
                    <calcop operator="subtract" field="year">
                        <number value="1"/>
                    </calcop>
                </calculate>
            </if-compare>
        </else>
        </if-compare>

        <entity-and entity-name="ProductStoreCatalog" list="productStoreCatalogs" filter-by-date="true">
            <field-map field-name="productStoreId" from-field="parameters.productStoreId"/>
        </entity-and>
        <if-not-empty field="productStoreCatalogs">
            <first-from-list list="productStoreCatalogs" entry="productStoreCatalog"/>
            <set field="callRemoveProductMap.prodCatalogId" from-field="productStoreCatalog.prodCatalogId"/>
            <call-service service-name="RemoveProductFromBestSellCategory" in-map-name="callRemoveProductMap"/>

            <set field="callAddProductMap.productStoreId" from-field="parameters.productStoreId"/>
            <set field="callAddProductMap.prodCatalogId" from-field="productStoreCatalog.prodCatalogId"/>
            <set field="callAddProductMap.week" from-field="week" type="Long"/>
            <set field="callAddProductMap.year" from-field="year" type="Long"/>
            <call-service service-name="AddProductToBestSellCategory" in-map-name="callAddProductMap"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="RemoveProductFromBestSellCategory" short-description="Remove products from best selling category.">
        <entity-and entity-name="ProdCatalogCategory" list="prodCatalogCategorys">
            <field-map field-name="prodCatalogId" from-field="parameters.prodCatalogId"/>
            <field-map field-name="prodCatalogCategoryTypeId" value="PCCT_BEST_SELL"/>
        </entity-and>
        <iterate list="prodCatalogCategorys" entry="prodCatalogCategory">
            <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollups">
                <field-map field-name="parentProductCategoryId" from-field="prodCatalogCategory.productCategoryId"/>
            </entity-and>
            <iterate list="productCategoryRollups" entry="productCategoryRollup">
                <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers">
                    <field-map field-name="productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
                </entity-and>
                <iterate list="productCategoryMembers" entry="productCategoryMember">
                    <remove-value value-field="productCategoryMember"/>
                </iterate>
            </iterate>
        </iterate>
    </simple-method>

    <simple-method method-name="AddProductToBestSellCategory" short-description="Add products to best selling category.">
        <entity-and entity-name="ProdCatalogCategory" list="prodCatalogCategorys">
            <field-map field-name="prodCatalogId" from-field="parameters.prodCatalogId"/>
            <field-map field-name="prodCatalogCategoryTypeId" value="PCCT_BEST_SELL"/>
        </entity-and>
        <first-from-list list="prodCatalogCategorys" entry="prodCatalogCategory"/>
        <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollupList">
            <field-map field-name="parentProductCategoryId" from-field="prodCatalogCategory.productCategoryId"/>
        </entity-and>
        <iterate list="productCategoryRollupList" entry="productCategoryRollup">
            <set-service-fields service-name="FindCategoryChild" map="parameters" to-map="CategoryChildMap"/>
            <set field="CategoryChildMap.productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
            <set field="CategoryChildMap.primaryProductCategoryId" from-field="productCategoryRollup.productCategoryId"/>
            <call-service service-name="FindCategoryChild" in-map-name="CategoryChildMap"/>
        </iterate>
    </simple-method>

    <simple-method method-name="FindCategoryChild" short-description="Find category child.">
        <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollupList">
            <field-map field-name="parentProductCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>
        <if-empty field="productCategoryRollupList">
            <set-service-fields service-name="FindBestSellingProduct" map="parameters" to-map="AddProductMap"/>
            <set field="AddProductMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <call-service service-name="FindBestSellingProduct" in-map-name="AddProductMap"/>
        <else>
            <iterate list="productCategoryRollupList" entry="productCategoryRollup">
                <set-service-fields service-name="FindCategoryChild" map="parameters" to-map="CategoryChildMap"/>
                <set field="CategoryChildMap.productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
                <call-service service-name="FindCategoryChild" in-map-name="CategoryChildMap"/>
            </iterate>
        </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="FindBestSellingProduct" short-description="Find best selling product.">
        <now-timestamp field="nowTimestamp"/>
        <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers" filter-by-date="true">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>
        <iterate list="productCategoryMembers" entry="productCategoryMember">
            <entity-condition entity-name="SalesOrderItemStarSchema" list="salesOrderItemStarSchemas" distinct="true">
                <condition-list combine="and">
                    <condition-expr field-name="productProductId" operator="equals" from-field="productCategoryMember.productId"/>
                    <condition-expr field-name="productStoreId" operator="equals" from-field="parameters.productStoreId"/>
                    <condition-expr field-name="orderDateWeekOfYear" operator="equals" from-field="parameters.week"/>
                    <condition-expr field-name="orderDateYearName" operator="equals" from-field="parameters.year"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="salesOrderItemStarSchemas">
                <first-from-list list="salesOrderItemStarSchemas" entry="salesOrderItemStarSchema"/>
                <make-value entity-name="ProductCategoryMember" value-field="newEntity"/>
                <set field="newEntity.productCategoryId" from-field="parameters.primaryProductCategoryId"/>
                <set field="newEntity.productId" from-field="salesOrderItemStarSchema.productProductId"/>
                <set field="newEntity.fromDate" from-field="nowTimestamp"/>
                <set field="newEntity.quantity" from-field="salesOrderItemStarSchema.quantity"/>
                <create-value value-field="newEntity"/>
            </if-not-empty>
        </iterate>
    </simple-method>
</simple-methods>
